= SPEC-1: Receipt Scanner & Expense Tracker with Currency Conversion
:sectnums:
:toc:

== Background

The Receipt Scanner & Expense Tracker is designed for individuals or small groups (such as households or friends) who want a secure, self-hosted way to track expenses using receipts. The system is fully self-contained, running on local infrastructure to ensure privacy, and it supports multi-language OCR to scan receipts in different languages. In addition, the system automatically categorizes expenses and offers a built-in currency conversion feature, allowing users to keep track of expenses across different currencies.

== Requirements

The following requirements are based on user feedback and prioritization, following the MoSCoW framework:

=== Must-Have
1. **Multi-User Support**:
   - Ability to create and manage multiple user accounts per installation.
   - Support for account sharing (e.g., couples sharing the same account) with shared expense visibility.
   - Ability to flag expenses based on credit or debit card accounts used for the purchase.

2. **Receipt Upload & Scanning**:
   - Users can upload receipt images (JPG, PNG, or PDF).
   - Multi-language OCR support for English, German, Korean, and Greek.
   
3. **Expense Categorization**:
   - Default categories (e.g., groceries, utilities, transport, dining) provided out of the box.
   - Option for users to create custom categories.
   - Integration with OpenAI API to automatically categorize expenses based on receipt descriptions and merchant names, requiring the user to provide their own API key.
   - Only anonymized data (e.g., merchant name, description) is sent to OpenAI, not sensitive details like prices.

4. **Currency Conversion**:
   - Built-in feature to convert receipt amounts into the user's preferred currency.
   - Support for multiple currencies, using an open-source or free external service for exchange rates (e.g., European Central Bank API).

5. **Security & Privacy**:
   - Self-hosted solution with no reliance on public cloud storage or services (other than external APIs as mentioned).
   - Minimal external dependencies with a focus on local data processing.
   - Simple, secure authentication for users, with the option for password protection.

6. **Ease of Installation**:
   - The system should leverage containerization (Docker, etc.) for easy installation and maintenance.
   - Clear and simple documentation for setting up the service on home servers.

=== Should-Have
1. **Expense Reporting**:
   - Provide summarized reports on spending by category, account, or user over customizable time periods.
   
2. **Localized User Interface**:
   - User interface translation to support multiple languages, matching the OCR capabilities (English, German, Korean, Greek).

=== Could-Have
1. **Offline Processing**:
   - In the long term, enable local processing of receipt categorization to minimize reliance on external APIs.
   
2. **Mobile Optimization**:
   - Optional mobile app or web UI optimized for mobile devices.

=== Wonâ€™t-Have (for MVP)
1. **Cloud-based Synchronization**:
   - No built-in support for cloud-based synchronization between installations or devices; the system will rely solely on local infrastructure for data storage and access.

== Method

This section outlines the technical architecture and components that will be used to implement the Receipt Scanner & Expense Tracker system.

=== Architecture Overview

The system is designed to run on local infrastructure (e.g., home servers or personal labs) and will rely on containerization for easy deployment and maintenance. It will consist of the following components:

- **User Interface (UI)**: A web-based interface accessible through a browser, allowing users to upload receipts, view expenses, manage categories, and configure settings such as currency preferences and API keys.
- **Backend Service**: The core service that handles OCR processing, categorization, currency conversion, and data storage. This will be built using a microservice architecture, leveraging:
  - **Tesseract OCR** for receipt scanning and text extraction.
  - **OpenAI API** for expense categorization (with user-provided API key).
  - **Open Exchange Rates API** for currency conversion.
- **Database**: A local database (such as SQLite or PostgreSQL) will be used to store users, receipts, categorized expenses, and account information.
- **Authentication**: Simple local authentication with password protection will be implemented, with shared accounts for couples or households.
  
The entire system will be containerized using **Docker**, simplifying deployment and management for users with minimal technical skills.

=== Components

==== OCR Engine (Tesseract)

We will use the **Tesseract OCR engine** for extracting text from uploaded receipt images. Tesseract supports the following features that are critical for this project:
- **Multi-language support**: Tesseract supports English, German, Korean, and Greek out of the box, making it suitable for scanning receipts in these languages.
- **PDF support**: Tesseract can handle not only images but also PDFs containing scanned receipts.
  
Workflow for OCR:
1. The user uploads a receipt (image or PDF) via the UI.
2. The backend service processes the receipt using Tesseract to extract text, including merchant names, descriptions, dates, and amounts.
3. The extracted text is passed to the expense categorization service.

==== Expense Categorization (OpenAI)

The expense categorization process will use the **OpenAI API** for natural language processing to automatically categorize the expenses based on receipt descriptions and merchant names. This ensures that users don't have to manually assign categories, making the process easier for them.

- **User's OpenAI API Key**: Users will need to provide their own OpenAI API key. This approach ensures that the cost of categorization is offloaded to the user while maintaining control over the data.
- **Anonymization**: Only anonymized data will be sent to OpenAI (e.g., merchant names and receipt descriptions, excluding sensitive details such as prices).

Workflow for Categorization:
1. The OCR output (merchant names, descriptions) is sent to the OpenAI API.
2. The OpenAI model analyzes the text and returns a suggested category (e.g., "groceries," "utilities," "dining").
3. The system either applies the suggested category or allows the user to override it via the UI.

==== Currency Conversion (Open Exchange Rates)

For currency conversion, we will use the **Open Exchange Rates API**, which offers competitive exchange rates close to those used by Visa and Mastercard. The system will convert all expense amounts to the user's preferred currency, allowing for consistent tracking of expenses across multiple currencies.

Workflow for Currency Conversion:
1. The system retrieves the latest exchange rates from Open Exchange Rates via their API.
2. When an expense is recorded, the system checks the receipt currency and automatically converts it to the user's preferred currency using the exchange rates.
3. The converted amount is stored alongside the original amount in the database.

==== Local Database (PostgreSQL)

A **PostgreSQL** database will be used to store:
- **Users**: Basic user information (username, password) for authentication and shared account management.
- **Receipts**: Metadata about uploaded receipts (image file paths, upload timestamps).
- **Expenses**: Categorized expenses, including merchant name, amount, date, and category.
- **Accounts**: Information on the credit/debit card or bank account used for the transaction.
- **Currency Information**: Exchange rates and converted amounts.

The database schema will include the following key tables:

image::expense-tracker.svg[Expense Tracker System Architecture]

=== Security

- **Local Authentication**: Password-based authentication will be implemented to ensure that only authorized users can access the system. Shared accounts will be supported to allow couples or households to track shared expenses.
- **Data Privacy**: All processing, except for anonymized API requests to OpenAI and Open Exchange Rates, will occur locally to ensure privacy.
- **Containerization**: Docker will be used to isolate the application environment, ensuring consistency and ease of installation while minimizing security risks.

== Implementation

This section provides a detailed guide to implementing the Receipt Scanner & Expense Tracker system. The primary goal is to make the deployment process as easy as possible through containerization and clear instructions.

=== Prerequisites

To install and run the system on a home server, the following prerequisites are required:

- **Operating System**: The solution should work on any Linux-based operating system (e.g., Ubuntu, Debian, or CentOS). Support for macOS and Windows (via Docker Desktop) will be available as well.
- **Docker**: Docker is the main tool for containerizing and deploying the application. Ensure Docker is installed on the server. Docker Compose is also required for managing multi-container applications.
  - [Install Docker](https://docs.docker.com/get-docker/)
  - [Install Docker Compose](https://docs.docker.com/compose/install/)
- **OpenAI API Key**: Users will need an OpenAI API key for the expense categorization feature. They should sign up and generate a key from the OpenAI dashboard.
  - [Get OpenAI API Key](https://beta.openai.com/signup/)
- **Open Exchange Rates API Key**: Users will need to register for an API key from Open Exchange Rates for currency conversion.
  - [Get Open Exchange Rates API Key](https://openexchangerates.org/signup)

=== Step-by-Step Installation

The following steps guide users through the installation and setup process.

==== Step 1: Clone the Repository

The code repository for the Receipt Scanner & Expense Tracker will be hosted on GitHub. Users can clone the repository using Git:

```bash
git clone https://github.com/your-repo/receipt-scanner-expense-tracker.git
cd receipt-scanner-expense-tracker
```

==== Step 2: Configure Environment Variables

Before running the application, users need to configure their environment variables for the OpenAI API key and Open Exchange Rates API key.

Create a .env file in the root directory of the project with the following content:

```bash
# .env
OPENAI_API_KEY=your_openai_api_key
OPEN_EXCHANGE_RATES_API_KEY=your_open_exchange_rates_api_key
PREFERRED_CURRENCY=USD
```

Users should replace the placeholder values with their actual API keys and preferred currency (e.g., EUR, GBP, etc.).

==== Step 3: Run Docker Compose

The system is containerized using Docker Compose to orchestrate the backend service, database, and other necessary components. To launch the application, run the following command:

```bash
docker-compose up -d
```

This command will:

- Set up a **PostgreSQL** container for the database.
- Set up a **backend container** for the web application, OCR processing, and API integrations.
- Set up a **frontend container** (if applicable) for the user interface.
==== Step 4: Access the Web Interface

Once the containers are up and running, the web interface can be accessed by navigating to http://localhost:8000 (or your server's IP address) in a web browser.

From the interface, users can:

- Create user accounts.
- Upload receipts for scanning and categorization.
- View and manage expenses.
- Configure custom categories.

==== Step 5: Persistent Data Storage

To ensure data is persisted between container restarts, the PostgreSQL database will be mounted to a local volume. By default, Docker Compose will create a volume for the database. If users want to configure custom storage paths, they can modify the docker-compose.yml file.

For example:

```yaml
services:
  db:
    image: postgres
    environment:
      POSTGRES_USER: youruser
      POSTGRES_PASSWORD: yourpassword
      POSTGRES_DB: receipt_tracker
    volumes:
      - ./data/postgres:/var/lib/postgresql/data
```

This ensures that all receipts, expenses, and user data are stored persistently on the host machine.

==== Step 6: Security and Access Control

Users can enable password protection for accounts through the web interface or by modifying the configuration in the .env file for administrative access.

If the system is intended for external access (i.e., from outside the home network), additional security steps should be taken:

- Set up **HTTPS** using a reverse proxy (e.g., Nginx with Let's Encrypt).
- Secure the server with a firewall and disable unused ports.
- Use strong passwords for user accounts and API keys.

==== Step 7: Logging and Monitoring

Logs for the backend service and database will be available via Docker. To view logs for debugging or monitoring, users can use the following commands:

```bash
# View backend logs
docker-compose logs backend

# View database logs
docker-compose logs db
```

It is recommended to integrate a simple logging system (like Elasticsearch or Prometheus) if more detailed monitoring is required.

==== Step 8: Backup and Restore

For backup and restore functionality, users should regularly back up the PostgreSQL database. This can be automated with a cron job or done manually with the following commands:

**Backup**:

```bash
docker exec -t postgres_container pg_dump -U youruser receipt_tracker > backup.sql
```

**Restore**:

```bash
docker exec -i postgres_container psql -U youruser -d receipt_tracker < backup.sql
```

=== Future Enhancements

- **Mobile Access**: A future version of the app could be optimized for mobile devices or include a mobile app for direct receipt capture and uploading.
- **Local Categorization Engine**: In the future, a local categorization model could be integrated to eliminate the need for OpenAI, offering full local processing of expenses.
- **Offline Mode**: A potential offline mode could be explored to make the system usable without any external API access, although this would mean omitting currency conversion and categorization in the short term.

== Milestones

This section outlines the key milestones for developing the Receipt Scanner & Expense Tracker system. These milestones help track progress from initial development to the release of the Minimum Viable Product (MVP) and further enhancements.

=== Milestone 1: Core System Setup (Estimated Time: 2-3 Weeks)
- **Goal**: Set up the core system infrastructure, including basic user management, database setup, and containerization.
- **Tasks**:
  - Set up PostgreSQL database with the required schema (users, receipts, expenses, accounts).
  - Implement basic user authentication and account management.
  - Containerize the backend service using Docker.
  - Set up initial web interface for user account creation and receipt upload.
- **Deliverable**: Core system running locally with basic user management and database integration.

=== Milestone 2: OCR Integration & Receipt Processing (Estimated Time: 2-3 Weeks)
- **Goal**: Integrate the Tesseract OCR engine to allow receipt scanning and data extraction from images and PDFs.
- **Tasks**:
  - Integrate Tesseract OCR for multi-language support (English, German, Korean, Greek).
  - Implement receipt upload functionality and pass receipts to OCR for processing.
  - Extract merchant names, descriptions, dates, and amounts from scanned receipts.
  - Display extracted data in the web interface for user review.
- **Deliverable**: Functional OCR pipeline that processes uploaded receipts and extracts relevant information.

=== Milestone 3: Expense Categorization (Estimated Time: 2-3 Weeks)
- **Goal**: Implement expense categorization using the OpenAI API to automatically categorize scanned receipts.
- **Tasks**:
  - Integrate OpenAI API for categorizing receipts based on merchant name and description.
  - Implement anonymization of data sent to OpenAI (e.g., exclude prices and sensitive details).
  - Provide default categories (e.g., groceries, utilities, dining) and allow users to create custom categories.
  - Display categorized expenses in the web interface.
- **Deliverable**: Categorization engine in place, with categorized expenses visible in the user interface.

=== Milestone 4: Currency Conversion (Estimated Time: 1-2 Weeks)
- **Goal**: Integrate the Open Exchange Rates API to allow automatic conversion of receipt amounts into the user's preferred currency.
- **Tasks**:
  - Set up integration with Open Exchange Rates API for fetching exchange rates.
  - Implement functionality to convert receipt amounts to the user's preferred currency.
  - Store both original and converted amounts in the database.
  - Display converted amounts in the expense tracker interface.
- **Deliverable**: Fully functional currency conversion for all expenses, visible to the user.

=== Milestone 5: Security & Data Privacy (Estimated Time: 1 Week)
- **Goal**: Ensure the system is secure and respects user data privacy.
- **Tasks**:
  - Implement password protection for user accounts.
  - Ensure secure storage of sensitive data (e.g., hashed passwords).
  - Review and implement necessary privacy measures to ensure data is not shared unnecessarily with external services.
  - Ensure all API keys are stored securely and are only accessible by authorized services.
- **Deliverable**: A secure system that protects user data and minimizes external exposure.

=== Milestone 6: System Testing and MVP Release (Estimated Time: 2 Weeks)
- **Goal**: Perform comprehensive system testing and release the MVP version of the system.
- **Tasks**:
  - Conduct unit and integration testing for each component (OCR, categorization, currency conversion, user management).
  - Test the entire flow: from receipt upload to categorization and currency conversion.
  - Resolve any bugs and ensure system stability.
  - Prepare release notes and documentation for the MVP.
- **Deliverable**: A fully functional MVP ready for self-hosted deployment, with documentation for installation and use.

=== Milestone 7: Post-MVP Enhancements (Estimated Time: TBD)
- **Goal**: Add optional enhancements and features based on user feedback.
- **Tasks**:
  - Implement mobile-optimized UI or native mobile apps.
  - Explore offline mode for local processing of categorization and currency conversion.
  - Provide detailed reporting and analytics for expenses.
  - Improve UI localization and support for additional languages (if needed).
- **Deliverable**: Additional features and improvements based on user feedback and system requirements.

== Gathering Results

This section outlines the methods for evaluating whether the Receipt Scanner & Expense Tracker system meets the original requirements and provides the intended functionality. The performance and usability of the system will be measured after the MVP release and deployment in real-world scenarios.

=== Evaluation Criteria

The success of the system will be evaluated based on the following criteria:

==== 1. Feature Completion
- **Multi-User Support**: Ensure that the system supports multiple user accounts and shared accounts as per the requirements.
- **Receipt Upload & OCR**: Verify that the OCR engine accurately scans receipts in English, German, Korean, and Greek and extracts the necessary data fields (merchant name, description, date, and amount).
- **Expense Categorization**: Confirm that the OpenAI API-based categorization system works reliably, and that users can create custom categories.
- **Currency Conversion**: Ensure that receipt amounts are correctly converted into the user's preferred currency using Open Exchange Rates, with both the original and converted amounts stored in the system.

==== 2. Security & Privacy
- **Data Privacy**: Confirm that all sensitive data (e.g., passwords and API keys) is stored securely, and that only anonymized data is shared with external services.
- **Local Processing**: Verify that as much of the receipt processing as possible is done locally, and that only minimal external services (OpenAI, Open Exchange Rates) are used, ensuring user control over data.
  
==== 3. Usability
- **Ease of Installation**: Assess whether the system is easy to install and run on a variety of home server setups using Docker, with minimal technical overhead for users.
- **User Interface**: Collect feedback on the web interface to ensure that users can easily upload receipts, view categorized expenses, and manage accounts and settings.
- **Error Handling**: Verify that the system handles errors gracefully, providing clear feedback to users in case of failures (e.g., OCR processing errors or API connection issues).

==== 4. Performance
- **System Responsiveness**: Evaluate the speed and responsiveness of the receipt scanning, categorization, and currency conversion processes. Ensure that the system performs well for small groups (households, small teams), with minimal latency in processing and displaying results.
- **Resource Usage**: Monitor the system's resource usage (CPU, memory) during regular operation, ensuring that it can run efficiently on typical home server hardware without causing strain.

=== User Feedback

After deployment, user feedback will be gathered to determine how the system performs in real-world use. Specific points of feedback include:
- **Accuracy of OCR and Categorization**: Users will be asked to report how well the system extracts data from receipts and how accurately expenses are categorized.
- **User Experience**: Feedback will be gathered on the overall user experience, including ease of installation, configuration, and day-to-day use.
- **Suggestions for Improvement**: Users will be encouraged to suggest additional features or enhancements, such as offline capabilities, mobile support, or additional reporting features.

=== Continuous Improvement

The results gathered from user feedback and performance evaluation will guide future updates and improvements to the system. These include:
- **Bug Fixes**: Addressing any bugs or issues discovered during testing or reported by users.
- **Optimization**: Improving the speed and efficiency of key processes such as OCR scanning and currency conversion.
- **Feature Enhancements**: Implementing new features based on user requests, such as more detailed reporting, mobile app support, or expanded language support for OCR and the user interface.

=== Performance Tracking

To ensure ongoing performance, the system will be periodically evaluated based on:
- **System Uptime**: Monitoring uptime and ensuring the system is stable for long-term use on home servers.
- **API Reliability**: Tracking the reliability of the OpenAI and Open Exchange Rates APIs, including handling failures and maintaining system performance when external services are down or unavailable.
- **Resource Monitoring**: Ongoing monitoring of resource usage to ensure that the system continues to run smoothly on various server setups without consuming excessive resources.

The evaluation process is critical for determining how well the system fulfills its goals and for identifying opportunities to improve the user experience and performance over time.
